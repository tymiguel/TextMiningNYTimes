AP5roll[i] <- sum(AP1[c(i-2):c(i+2)])/5
} else {
## you don't need this, but it is easier to understand the 'else'
AP5roll[i] <- NA
}
}
AP5roll
AP5rollm <- matrix(AP5roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP5rollm
rolling_avg <- function(new_vector, rolling_months) {
new_vector <- 0
for (i in 1:length(AP1)) {
if (i > round(rolling_months) && i < length(AP1) - (round(rolling_months) - 1)) {
new_vector[i] <- sum(AP1[c(i-round(rolling_months)):c(i+round(rolling_months))])/rolling_months
} else {
## you don't need this, but it is easier to understand the 'else'
new_vector[i] <- NA
}
}
}
rolling_avg(test, 5)
test<-rolling_avg(test, 5)
test
rolling_avg <- function(new_vector, rolling_months) {
new_vector <- 0
for (i in 1:length(AP1)) {
if (i > round(rolling_months/2) && i < length(AP1) - (round(rolling_months/2) - 1)) {
new_vector[i] <- sum(AP1[c(i-round(rolling_months/2)):c(i+round(rolling_months/2))])/rolling_months
} else {
## you don't need this, but it is easier to understand the 'else'
new_vector[i] <- NA
}
}
}
rolling_avg(test, 5)
test <- rolling_avg(test, 5)
test1 <- rolling_avg(test, 5)
round(5/2)
round(11/2)
round(3/2)
round(5/2)
rolling_avg <- function(new_vector, rolling_months) {
new_vector <- 0
for (i in 1:length(AP1)) {
if (i > 2 && i < length(AP1) - 1) {
new_vector[i] <- sum(AP1[c(i-round(rolling_months/2)):c(i+round(rolling_months/2))])/rolling_months
} else {
## you don't need this, but it is easier to understand the 'else'
new_vector[i] <- NA
}
}
}
test1 <- rolling_avg(test, 5)
AP11roll <- 0
for (i in 1:length(AP1)) {
if (i > 5 && i < length(AP1) - 4) {
AP5roll[i] <- sum(AP1[c(i-5):c(i+5)])/11
} else {
## you don't need this, but it is easier to understand the 'else'
AP11roll[i] <- NA
}
}
AP11rollm <- matrix(AP5roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP11rollm
AP11rollm <- matrix(AP11roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP11rollm
AP11roll <- 0
for (i in 1:length(AP1)) {
if (i > 5 && i < length(AP1) - 4) {
AP11roll[i] <- sum(AP1[c(i-5):c(i+5)])/11
} else {
## you don't need this, but it is easier to understand the 'else'
AP11roll[i] <- NA
}
}
AP11rollm <- matrix(AP11roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP11rollm
AP12roll <- 0
for (i in 1:length(AP1)) {
if (i > 6 && i < length(AP1) - 5) {
AP12roll[i] <- (sum(AP1[c(i-5):c(i+5)]+sum(AP1[c(i+1-5):c(i+5)])))/24
} else {
## you don't need this, but it is easier to understand the 'else'
AP12roll[i] <- NA
}
}
data("AirPassengers")
AP <- AirPassengers
AP1 <- as.numeric(AP) # convert to numeric vector
AP12roll <- 0
for (i in 1:length(AP1)) {
if (i > 6 && i < length(AP1) - 5) {
AP12roll[i] <- (sum(AP1[c(i-5):c(i+5)]+sum(AP1[c(i+1-5):c(i+5)])))/24
} else {
## you don't need this, but it is easier to understand the 'else'
AP12roll[i] <- NA
}
}
AP12rollm <- matrix(AP12roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
names <- c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec') # colhead
years <- 1949:1960 # row heads
AP12rollm <- matrix(AP12roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP12rollm
for (i in 1:length(AP1)) {
if (i > 6 && i < length(AP1) - 5) {
AP12roll[i] <- (sum(AP1[c(i-6):c(i+6)]+sum(AP1[c(i-5):c(i+5)])))/24
} else {
## you don't need this, but it is easier to understand the 'else'
AP12roll[i] <- NA
}
}
AP12rollm <- matrix(AP12roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP12rollm
for (i in 1:length(AP1)) {
if (i > 6 && i < length(AP1) - 5) {
AP12roll[i] <- ((sum(AP1[c(i-6):c(i+6)]+sum(AP1[c(i-5):c(i+5)])))/24)
} else {
## you don't need this, but it is easier to understand the 'else'
AP12roll[i] <- NA
}
}
AP12rollm <- matrix(AP12roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP12rollm
sum(AP1[c(1):c(13)]+sum(AP1[c(2):c(12)]))/24
(sum(AP1[c(1):c(13)]+sum(AP1[c(2):c(12)])))/24
(sum(AP1[c(1):c(13)]/13)+(sum(AP1[c(2):c(12)])/11)
AP12rollm <- matrix(AP12roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
## try to create function
rolling_avg <- function(new_vector, rolling_months) {
new_vector <- 0
for (i in 1:length(AP1)) {
if (i > round(rolling_months/2) && i < length(AP1) - (round(rolling_months/2) - 1)) {
new_vector[i] <- sum(AP1[c(i-round(rolling_months/2)):c(i+round(rolling_months/2))])/rolling_months
} else {
## you don't need this, but it is easier to understand the 'else'
new_vector[i] <- NA
}
}
}
test1 <- rolling_avg(test, 5)
(sum(AP1[c(1):c(13)])/13)+(sum(AP1[c(2):c(12)])/11)
AP12roll <- 0
for (i in 1:length(AP1)) {
if (i > 6 && i < length(AP1) - 5) {
AP12roll[i] <- ((sum(AP1[c(i-6):c(i+6)])+sum(AP1[c(i-5):c(i+5)]))/24)
} else {
## you don't need this, but it is easier to understand the 'else'
AP12roll[i] <- NA
}
}
AP12rollm <- matrix(AP12roll, byrow = TRUE, nrow = 12, dimnames = list(years, names))
AP12rollm
AP3roll <- 0
for (i in 1:length(AP1)) {
if (i > 1 && i < length(AP1)) {
AP3roll[i] <- ((AP1[i] + AP1[i+1] + AP1[i-1])/3)
} else {
## you don't need this, but it is easier to understand the 'else'
AP3roll[i] <- NA
}
}
AP3rollm <- matrix(AP3roll, byrow = TRUE, nrow = 12, dimnames = list(years, names)) # convert to a matrix
AP3rollm
AP3roll
AP1[12] + AP1[11] + AP1[13])/3
(AP1[12] + AP1[11] + AP1[13])/3
(AP1[13] + AP1[12] + AP1[14])/3
(AP1[14] + AP1[13] + AP1[15])/3
AP3rollm
AP
r = c(4,5,4,NA)
mean(r)
?mean
mean(r, na.rm=TRUE)
(4+5+4)/3
list.files() # prints the files in the current directory
lapply(list(1, "a", TRUE), str)
str(1)
x<-str(1)
x<-invisible(str(1))
x
?invisible
x<-c(2,3,4)
str(x)
y<-str(x)
y<-paste(str(x))
y
str(x)
lapply(list(1,2,3), sum)
lapply(c(1,2,3), sum)
sum
lapply(list(1,2,3), sum)
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
str(pioneers)
split_low <- lapply(split_math, tolower)
split_math <- strsplit(pioneers, split = ":")
str(pioneers) # as you can see, 'pioneers' is a character vector
split_low <- lapply(split_math, tolower)
?tolower
split_math <- strsplit(pioneers, split = ":")
str(split_math)
?strsplit
str(split_math[[1]])
class(str(split_math[[1]]))
str(split_math[[1]])
p<-str(split_math[[1]])
class(p)
str(split_math) # now, we can see that have a list of 4 character vectors, with 2 elements in each vector
p<-str(split_math[[1]])
p<-str(split_math[[1]][1])
p<-str(split_math[[1]][1])
class(p)
p<-str(split_math[[1]])
p<-list(2,3,4)
p
split_low <- lapply(split_math, tolower)
split_low
str(pioneers) # as you can see, 'pioneers' is a character vector
split_math <- unlist(strsplit(pioneers, split = ":"))
split_math
split_math <- strsplit(pioneers, split = ":")
str(split_math) # now, we can see that have a list of 4 character vectors, with 2 elements in each vector
pioneers <- c("GAUSS", "BAYES", "PASCAL", "PEARSON")
str(pioneers) # as you can see, 'pioneers' is a character vector
pion_low <- lapply(pioneers, tolower)
str(pion_low)
str(pion_low[1])
str(pion_low)
?lapply
sapply(pioneers, tolower)
x>-sapply(pioneers, tolower)
x<-sapply(pioneers, tolower)
class(x)
x
str(x)
l<-str(x)
l
4 + "cat"
x<-4 + "cat"
x<- 4 * "cat"
x<- 4/"cat"
x<- 4/c("cat")
is.null(lapply(list(1, "a", TRUE), str))
x<-lapply(list(1, "a", TRUE), str)
is.null(x)
x
is.null(x[[1]])
is.null(x[1])
is.null(x[[1]])
lapply(list(1, "a", TRUE), str)
lapply(list(1, "a", TRUE), str)
?str
str(3)
x<-str(3)
x
is.null(x)
?NULL
?str
?invisible
?str
str(x)
str(list(1,"a",TRUE))
lapply(list(1, "a", TRUE), str)
?str
lapply(list(1, "a", TRUE), str)
str(list(1,"a",TRUE))
x<-str(list(1,"a",TRUE))
x
lapply(list(1, "a", TRUE), str)
x<-lapply(list(1, "a", TRUE), str)
x
x # as we can see, because we only have the return value here, we only have a list of 3 NULLs
str(3)
x<-str(2)
y<-str(2)
y
x<-lapply(list(1, "a", TRUE), str)
x # as we can see, because we only have the return value here, we only have a list of 3 NULLs
?cat
cat("The average temperature is", 4); x<-cat("The average temperature is", 4)
x
x
cat("The average temperature is", 4)
x<-cat("The average temperature is", 4)
x
paste("The average temperature is", 4)
x<-paste("The average temperature is", 4)
?cat
?paste
?paste
cat?
?cat
?paste
?cat
f <- data.frame(x=c(2,3,4,5,NULL,6),
x1 = c(10,12,12,NULL,12,NULL),
x2 = c(12,NULL,NULL,12,NULL,10))
f <- data.frame(x=c(2,3,4,5,NULL,6),
x1 = c(10,12,12,NULL,12,NULL),
x2 = c(12,NULL,NULL,12,NULL,10))
?data.frame
f <- data.frame(x=c(9,3,4,5,NULL,6),
x1 = c(10,12,12,NULL,12,NULL),
x2 = c(12,NULL,NULL,12,NULL,10))
f <- data.frame(x=c(9,7,4,5,NULL,6),
x1 = c(10,12,12,NULL,12,NULL),
x2 = c(12,NULL,NULL,12,NULL,10))
f <- data.frame(x=c(9,7,4,5,NULL,6),
x1 = c(10,12,12,NULL,12,9),
x2 = c(12,7,8,12,NULL,10))
f
f[1,2] <- NULL
as.factor(NULL)
as.factor("NULL")
"NULL"==as.factor("NULL")
library(dplyr)
library(readr)
csb.df = read_csv(paste0('/Users/tylermiguel/Desktop/Bentley/Data Mining (MA710)/Assignment 1/CollegeScorecard_Raw_Data/MERGED2014_15_PP.csv))
# Read the following documentation to find variables of interest:
# https://collegescorecard.ed.gov/assets/FullDataDocumentation.pdf
# List the variable names from the dataset
names(csb.df)
# Look for variables you want to analyze:
csb.df %>% # Do _not_ select `UNITID`
select(OPEID:RELAFFIL,
starts_with("PCIP"),
contains("LOAN")
) %>%
head
# Then add them to the `select` command below and
# remove them from the `select` command above
# Select the variables you have chosen:
csb.df %>%
select(OPEID, OPEID6, STABBR, ZIP, LOCALE, LONGITUDE, LATITUDE, STABBR,
starts_with("PCIP")
) %>%
{.} -> csb.vars.df
str(csb.vars.df)
# Change the class of certain variables as needed
csb.vars.df %>%
mutate(LOCALE    = as.integer(LOCALE),
LONGITUDE = as.numeric(LONGITUDE),
LATITUDE  = as.numeric(LATITUDE),
STABBR    = as.factor(STABBR)
) %>%
mutate_at(vars(starts_with("PCIP")), funs(as.integer)
) %>%
{.} -> csb.class.df
str(csb.class.df)
# Check for the number of NA (missing) values
# for individual variables:
csb.class.df %>%
summarize(
LATITUDE.cnt.na = sum(is.na(LATITUDE))
)
# Check for the number of NA (missing) values
# for a range of variables:
csb.class.df %>%
summarise_at(.cols = vars(starts_with("PCIP")),
.funs = function(x) sum(is.na(x)))
# Summarize individual variables like this:
csb.class.df %>%
summarize(
PCIP12.mean = mean(PCIP12, na.rm=TRUE)
)
# Summarize individual variables, using `group_by`, like this:
csb.class.df %>%
group_by(STABBR) %>%
summarize(
PCIP12.mean = mean(PCIP12, na.rm=TRUE)
)
# Summarize ranges of variables like this:
csb.class.df %>%
summarise_at(.cols = vars(starts_with("PCIP")),
.funs = function(x) mean(x, na.rm=TRUE))
# Summarize ranges of functions, using `group_by`, like this:
csb.class.df %>%
group_by(STABBR) %>%
summarise_at(.cols = vars(starts_with("PCIP")),
.funs = function(x) mean(x, na.rm=TRUE)
) %>%
print(n=100)
csb.df = read_csv(paste0('/Users/tylermiguel/Desktop/Bentley/Data Mining (MA710)/Assignment 1/CollegeScorecard_Raw_Data/MERGED2014_15_PP.csv'))
names(csb.df)
csb.df %>% # Do _not_ select `UNITID`
select(OPEID:RELAFFIL,
starts_with("PCIP"),
contains("LOAN")
) %>%
head
str(csb.df)
# Select the variables you have chosen:
csb.df %>%
select(OPEID, OPEID6, STABBR, ZIP, LOCALE, LONGITUDE, LATITUDE, STABBR,
starts_with("PCIP")
) %>%
{.} -> csb.vars.df
str(csb.vars.df)
str(csb.df)
# Change the class of certain variables as needed
csb.vars.df %>%
mutate(LOCALE    = as.integer(LOCALE),
LONGITUDE = as.numeric(LONGITUDE),
LATITUDE  = as.numeric(LATITUDE),
STABBR    = as.factor(STABBR)
) %>%
mutate_at(vars(starts_with("PCIP")), funs(as.integer)
) %>%
{.} -> csb.class.df
str(csb.class.df)
# for individual variables:
csb.class.df %>%
summarize(
LATITUDE.cnt.na = sum(is.na(LATITUDE))
)
csb.df = read_csv('/Users/tylermiguel/Desktop/Bentley/Data Mining (MA710)/Assignment 1/CollegeScorecard_Raw_Data/MERGED2014_15_PP.csv')
str(csb.df)
library(stringr)
library(knitr)
library(dplyr)
library(ggplot2)
library(plotrix)
library(clValid)
library(tm)
library(RTextTools)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
library(qdap)
source(file = "20170321_TextMining_functions.R")
setwd("/Users/tylermiguel/Desktop/Bentley/Data Mining (MA710)/Text Mining NY Times/")
source(file = "20170321_TextMining_functions.R")
options(dplyr.width = Inf)
load(file = "drone_article.df.RData")
num.articles <- nrow(article.df)
doc.ndx <- 1:5
var_df <- article.df[doc.ndx, ]
kable(var_df, format = "pandoc")
docs <- article.df$snippet
docs <- docs[-c(which(is.na(docs)), which(!str_detect(docs, c("[a-z]"))))]
docs.clean <- clean.documents(docs)
modify.words = function(document.vector,
stem.words=FALSE,
ngram.vector=1,
stop.words=c()) {
document.vector %>% # document.vector = docs.clean
str_split("[[:space:]]") %>%  # split on spaces, and return a string character vector
{ if(stem.words) lapply(., wordStem) # stems the words
else .
} %>%
lapply(function(x) setdiff(x,stop.words)) %>% # remove stop words
lapply(function(x) {  # finds ngrams
ngrams(x,ngram.vector) %>%
lapply( function(x) paste(x,collapse=".")) %>%
paste(collapse=" ")
})
}
docs.sns <-
modify.words(
docs.clean,
stem.words = TRUE,
ngram.vector = 1,
stop.words=
c(stopwords(kind = "english"),
"said", "drone"
)
)
docs.sns[doc.ndx]
doc.matrix <-
create_matrix(docs.sns,
language = "english",
stemWords = FALSE,
removePunctuation = FALSE,
weighting = tm::weightTf
)
dtm <- reduce.dtm(dtm, freq.threshold = 5)
dtm <- as.matrix(doc.matrix)
dim(dtm)
dtm <- reduce.dtm(dtm, freq.threshold = 5)
ncol(dtm)
term_frequency <- colSums(dtm)
term_frequency <- sort(term_frequency, decreasing = TRUE)
term_frequency[1:10]
barplot(term_frequency[1:10], col = "tan", las = 2)
x <- data_frame(a = rep(c(1,2,3), 10),
b = rep(c(10, 12, 14), 10),
c = rep(c(7,4,2), 10))
x
prn <- princomp(a)
prn <- princomp(x)
prn
prn$x[,1:2]
?prcomp
?princomp
prn <- prcomp(x)
prn
prn$x
cov(prn$x)
diag(prn$sdev^2)
library(stringr)
library(knitr)
library(dplyr)
library(ggplot2)
library(plotrix)
library(clValid)
library(tm)
library(RTextTools)
library(wordcloud)
library(RColorBrewer)
library(syuzhet)
?cluster.stat
?cluster.stat
